<!DOCTYPE html>
<html>
<head>
    <title>SignalR Example</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.5/signalr.min.js"></script>
</head>
<body>
    <button class="button" type="button">resume</button>
    <div id="image-container" style="background-color:black"></div>

    <script>

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/mainHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start()
            .then(() => console.log("Connection started"))
            .catch(err => console.error("Error starting connection:", err));

        connection.on("ReceiveLiveStream", async function (base64) {
            $("#image-container").empty();
            // Create an <img> tag and set its src attribute to the received Base64 string
            const imgElement = document.createElement("img");
            imgElement.src = "data:image/png;base64," + base64; // Assuming the image is PNG format
            document.getElementById("image-container").appendChild(imgElement);
        });

        connection.on("ReceiveAudioStream", (audioData) => {

            var buffer = base64ToArrayBuffer(audioData);
            const audioFloat32Array = new Float32Array(buffer);
            // console.log(audioData.length);

            var audioContext = new AudioContext();

            document.querySelector('button').addEventListener('click', function () {
                audioContext.resume().then(() => {
                    console.log('Playback resumed successfully');
                });
            });

            const audioBuffer = audioContext.createBuffer(1, audioFloat32Array.length, 44100); // Mono, 44.1 kHz
            // console.log(audioFloat32Array.length);
            audioBuffer.copyToChannel(audioFloat32Array, 0);
            // Fill audio buffer with received audio data
            audioBuffer.getChannelData(0).set(audioFloat32Array);
            // console.log(audioBuffer.getChannelData(0));
            // console.log(audioBuffer.getChannelData(1));

            const source = audioContext.createBufferSource();
            source.buffer = audioBuffer;
            source.connect(audioContext.destination);
            source.start();
            // Process and play audio data received from the server
        });


        function base64ToArrayBuffer(base64) {
            var binaryString = atob(base64);
            var bytes = new Uint8Array(binaryString.length);
            for (var i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        }

        function base64ToFloat32Array(base64) {
            // Decode base64 to binary string
            var binaryString = atob(base64);

            // Create ArrayBuffer to hold the binary data
            var buffer = new ArrayBuffer(binaryString.length);

            // Create a typed array to represent the binary data
            var bytes = new Uint8Array(buffer);

            // Fill the typed array with binary data from the base64 string
            for (var i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }

            // Interpret the binary data as Float32Array
            var floatArray = new Float32Array(buffer);

            return floatArray;
        }


        function writeWavFile(audioBuffer, sampleRate, numChannels) {
            // Function to convert Float32Array to PCM audio buffer
            function floatToPCM(input) {
                var output = new Int16Array(input.length);
                for (var i = 0; i < input.length; i++) {
                    var s = Math.max(-1, Math.min(1, input[i]));
                    output[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
                }
                return output;
            }

            var pcmData = floatToPCM(audioBuffer);

            var buffer = new ArrayBuffer(44 + pcmData.length * 2);
            var view = new DataView(buffer);

            // RIFF identifier
            writeString(view, 0, 'RIFF');
            // file length
            view.setUint32(4, 36 + pcmData.length * 2, true);
            // RIFF type
            writeString(view, 8, 'WAVE');
            // format chunk identifier
            writeString(view, 12, 'fmt ');
            // format chunk length
            view.setUint32(16, 16, true);
            // sample format (raw)
            view.setUint16(20, 1, true);
            // channel count
            view.setUint16(22, numChannels, true);
            // sample rate
            view.setUint32(24, sampleRate, true);
            // byte rate (sample rate * block align)
            view.setUint32(28, sampleRate * 4, true);
            // block align (channel count * bytes per sample)
            view.setUint16(32, numChannels * 2, true);
            // bits per sample
            view.setUint16(34, 16, true);
            // data chunk identifier
            writeString(view, 36, 'data');
            // data chunk length
            view.setUint32(40, pcmData.length * 2, true);

            // write PCM samples
            var index = 44;
            pcmData.forEach(function (sample) {
                view.setInt16(index, sample, true);
                index += 2;
            });

            // Function to write string to DataView
            function writeString(view, offset, string) {
                for (var i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
            }

            return new Blob([view], { type: 'audio/wav' });
        }

        
    </script>
</body>
</html>
